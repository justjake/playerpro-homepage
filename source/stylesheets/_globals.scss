// SCSS mixin library
@import "bourbon/bourbon";

// provides responsive helpers
@import "neat/neat";

// Fonts
$font-family: 'Quicksand', 'Roboto', 'Helvetica Neue', Arial, Helvetica, sans-serif;
$font-family: 'Roboto', 'Helvetica Neue', Arial, Helvetica, sans-serif;

// color palette
$white:         #fff;
$black:         #000;
$orange:        #f6921d;

$burnt-umber:    #8c280a; // highlight bold

$bg-light:      #f7f7f7;
$bg-grey:       #eee;     // form footers, boxed zones on normal BG
$bg-dark:       #24140f;

$text-dark:     #333;
$text-medium:   #818181;  // text in form footers
$text-mid:      #c2c2c2;
$text-light:    #eee;

$footer-color:  $bg-light;

// button colors
$orange-light:  #f8a622;
$orange-dark:   #f48118;
$orange-border: #b97c19;

// stylings
$header-box-shadow: 0px 1px 3px black(0.22);

// Sizing ----------------------------------------------------------
$em: 16px;

// Layers ----------------------------------------------------------
// used with the `layer` mixin for z-index management
$layer-header: 900;


// Functions --------------------------------------------------------

// CSS3
@mixin backface-visibility($bf) {
  @include prefixer(backface-visibility, $bf, webkit moz ms spec);
}

// z-index layer managent


@function em($destination-scale, $local-scale: $em) {
  @return $destination-scale / $local-scale * 1em;
}

// helpful for making tons of drop shadows
@function black($opacity: 1) {
  @if $opacity == 1 {
    @return $black
  }
  @else {
    @return rgba($black, $opacity);
  }
}

// MIXINS -----------------------------------------------------------

@mixin border-box {
  @include box-sizing(border-box);
}

// Text styles
@mixin tagline($size: 1em) {
  font-weight: bold;
  color: $burnt-umber;
  font-size: $size;
}

// Make this object unaffected by its parent's padding
@mixin dont-pad($size, $dir: left right) {
  @each $d in $dir {
    margin-#{$d}: -1 * $size;
  }
}

@mixin image-replacement {
  color: transparent;
  text-shadow: none;
  overflow: none;
  text-indent: -100%;
}

@mixin layer($base, $offset: 0, $position: relative) {
  @if $position {
    position: $position;
  }
  z-index: $base + $offset;
}
